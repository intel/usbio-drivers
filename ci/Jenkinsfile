#!groovy
@Library(['owmCommon@2.7.0', "abi_central"]) _

//Useful for private branche where you just want to compile and test the output
//Master/Develop these should be set to false to SS/IpScan always execute
Boolean SELECTIVE_SCAN = true

//Define the containers this build automation will run on. 
def cloudNamelinux = 'idoc'
def containerNameLinux = 'usbiolinux'
def containerImageLinux = 'amr-registry.caas.intel.com/owr/ingredient/usbio/linux/agent:1.0'
def agentWorkspaceLinux = "workspace/usbio"

def podDefinitionYamlLinux = """
kind: Pod
apiVersion: v1
spec:
  containers:
  - name: jnlp
    image: amr-registry.caas.intel.com/owr/jnlp-slave:latest
    tty: true
    imagePullPolicy: Always
  - name: ${containerNameLinux}
    image: ${containerImageLinux}
    tty: true
    imagePullPolicy: Always
    command:
    - /bin/sh
    args:
    - -c
    - cat
"""

pipeline {
  agent none

  environment {
    BuildVersionPrefix = '1.0.0'
    KERN_VER = '5.19.0-46-generic'
  }

  //Parameters for the Jenkins GUI.  It is recommended to not change them in the Jenkinsfile unless you are trying to change the Jenkins GUI.
  //Parameters take +1 cycle to adobt the change.Ie If you change a defaultValue below and push, the first run the defaultValue will be the old value.
  //All subsequent runs will have the new default value.
  parameters {
    booleanParam(name:'RUN_COVERITY', defaultValue: false, description:'Enable to run Secure Coverity Scan')
    booleanParam(name:'RUN_PROTEX', defaultValue: false, description:'Enable to Secure IP scan')
    booleanParam(name:'RUN_VIRUS', defaultValue: false, description:'Enable to run Virus scan')
    booleanParam(name:'RUN_BDBA', defaultValue: false, description:'Enable to run BDBA scan')
    booleanParam(name:'RUN_SSCB', defaultValue: false, description:'Enable to run SSCB scan')
    booleanParam(name:'SUBMIT_TO_SDLE', defaultValue: false, description: 'Enables SDLE Evidence Upload and SDLE Task updates for completed scans')
    booleanParam(name:'PROCESS_BOM', defaultValue: false, description:'Process BOM Data and update IPX database')
  }

  options {
    timestamps()
    skipDefaultCheckout(true)
  }

  stages {
    stage('Initialize') {
      agent {
        kubernetes {
          cloud cloudNamelinux
          slaveConnectTimeout "300000"
          yaml podDefinitionYamlLinux
          customWorkspace agentWorkspaceLinux
          defaultContainer containerNameLinux
        }
      }
      steps {
        container(containerNameLinux) {
          script{
            def ticValue = ticGen projectName: "platformdrivers-usbio", versionPrefix: env.BuildVersionPrefix, setDisplayName: true
            env.BuildVersion = "${ticValue}"
            log.Info("BuildVersion is " + env.BuildVersion)

            if (BRANCH_NAME ==~ /(usbio-main)/) {
              SELECTIVE_SCAN = false
            }
          }
        }
      }
    } //end : Initialize stage

    stage("Build and scan Stages"){
      parallel {
        stage('Build usbio Driver - Linux') {
          agent {
            kubernetes {
              cloud cloudNamelinux
              slaveConnectTimeout "300000"
              yaml podDefinitionYamlLinux
              customWorkspace agentWorkspaceLinux
              defaultContainer containerNameLinux
            }
          }
          steps{
            container(containerNameLinux) {
              script{
                abi_init config: "ci/BuildConfig.json"
                abi_build subComponentName: 'Usbio_linux'
                abi_copy_files metadataFile: 'ci/CopyFiles_Binaries.json'
                abi_stash_push packageName: "BuildBin-Linux"
              }
            }
          }
        } //end : Build usbio Driver - Linux stage

        stage("SecureCoverityScan") {
          agent {
            kubernetes {
              cloud cloudNamelinux
              slaveConnectTimeout "300000"
              yaml podDefinitionYamlLinux
              customWorkspace agentWorkspaceLinux
              defaultContainer containerNameLinux
            }
          }
          when{
            anyOf{
              expression{ params.RUN_COVERITY == true }
              expression{ BRANCH_NAME ==~ /(usbio-main)/ }
            }
            beforeAgent true
          }
          environment {
            CoverityStream = "OS_USBIO_Driver_Stack"
            COVERITY_UNSUPPORTED = 1
          }
          steps {
            container(containerNameLinux) {
              script {
                abi_init config: "ci/BuildConfig.json"
                lock("Usbio_SecureCoverityScan") {
                  abi_coverity_analyze stream: env.CoverityStream, version: env.BuildVersion
                }
                abi_stash_push packageName: "BuildBin-SecureCoverityScan"
              }
            }
          }
        } //end SecureCoverityScan Stage
      } //Parallel
    } //Build and scan Stages

    stage("ABI Central Scan") {
      agent {
        kubernetes {
          cloud cloudNamelinux
          slaveConnectTimeout "300000"
          yaml podDefinitionYamlLinux
          customWorkspace agentWorkspaceLinux
          defaultContainer containerNameLinux
        }
      }
      when {
        anyOf{
          expression{ BRANCH_NAME ==~ /(usbio-main)/ }
          expression{ params.RUN_PROTEX }
          expression{ params.RUN_BDBA }
          expression{ params.RUN_VIRUS }
          expression{ params.RUN_SSCB }
          expression{ params.RUN_COVERITY }
        }
        beforeAgent true
      }
      steps {
        container(containerNameLinux) {
          script {
            abi_init config: "ci/BuildConfig.json"
            def ingWorkspace = abi_workspace_get()
            abi_stash_pull packagePattern: "BuildBin-*"
            dir (ingWorkspace) {
              def comp_scans = []
              if (params.RUN_COVERITY || BRANCH_NAME ==~ /(usbio-main)/) {
                zip zipFile: "coverity-reports.zip", dir: "OWRBin/Documents/Coverity"
                comp_scans = ["coverity" : "coverity-reports.zip"]
              }
              runtimeContext = abi_get_current_context()
              zip zipFile: "${runtimeContext['IngredientName']}-${runtimeContext['IngredientVersion']}.zip", dir: "OWRBin"

              abi_central config: 'ci/BuildConfig.json',
              outpath: "OWRBin/Documents/",
              binary_package: "${runtimeContext['IngredientName']}-${runtimeContext['IngredientVersion']}.zip",
              submit_to_sdle: params.SUBMIT_TO_SDLE,
              compilation_scan: comp_scans,
              selective_scan: SELECTIVE_SCAN
            }
          }
          abi_stash_push packageName: "BuildBin-CentralScan", pattern: "OWRBin/Documents"
        }
      }
    } // end: ABI Central Scan stage

    stage ("Process BOM") {
      when {
        beforeAgent true
        anyOf {
          // expression{BRANCH_NAME ==~ /(usbio-main)/}
          expression { params.PROCESS_BOM == true }
        }
      }
      agent {
        kubernetes {
          cloud cloudNamelinux
          slaveConnectTimeout "300000"
          yaml podDefinitionYamlLinux
          customWorkspace agentWorkspaceLinux
          defaultContainer containerNameLinux
        }
      }
      steps {
        script {
          abi_init config: "ci/BuildConfig.json"

          // Download scan reports (Protex and/or BDBA is required)
          abi_stash_pull packagePattern: "BuildBin-*"

          ProcessBomData()
        }
      }
    }

    stage('Create Package and Upload To Artifactory'){
      agent {
        kubernetes {
          cloud cloudNamelinux
          slaveConnectTimeout "300000"
          yaml podDefinitionYamlLinux
          customWorkspace agentWorkspaceLinux
          defaultContainer containerNameLinux
        }
      }
      steps{
        container(containerNameLinux) {
          script{
            abi_init config: "ci/BuildConfig.json"
            runtimeContext = abi_get_current_context()
            abi_stash_pull packagePattern: "BuildBin-*"

            //Custom Artifact Pakage Name
            ArtifactPkgName = runtimeContext['IngredientName'] + '-' +  runtimeContext['IngredientVersion']
            CustomDeployPath = "${runtimeContext['DeployCustomPath']}/${runtimeContext['IngredientName']}/${runtimeContext['IngredientVersion']}"

            abi_artifact_generation metaflag: false
            abi_artifact_deploy custom_deploy_path:"${CustomDeployPath}",link_title: "Artifact : ${ArtifactPkgName}.zip"
          }
        }
      }
    } //end : Create Package  and Upload To Artifactory stage
  } //end stages

  post {
    success {
      echo "JOB SUCCESS"
    }
    failure {
      echo "JOB FAILED"
    }
    always{
      abi_send_email()
    }
  }
} //end pipeline

void ProcessBomData() {
  def bdbaReportPattern = "*-components.csv"
  def protexReportPattern = "COS_*.xlsx"
  catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
    def ctx = abi_get_current_context()
    oneBomRepoPath = "${ctx['DeployCustomServer']}/artifactory/${ctx['DeployCustomPath']}/${ctx['IngredientName']}/${ctx['IngredientVersion']}"
    def argList = [ignore_errors: true, debug: true, repo: oneBomRepoPath]
    def componentlist = GetFileList(bdbaReportPattern)
    def workbooklist = GetFileList(protexReportPattern)
    if ( componentlist ) { argList.component_list = componentlist }
    if ( workbooklist ) { argList.workbook_list = workbooklist }
    if ( componentlist || workbooklist ) { abi_one_bom argList }
    else
    {
      log.Error ("No component Reports found, Please verify if either your BDBA Scan or Protex Scan was executed as part of this Job")
      error("\n")
    }
  }
}

def GetFileList(String filePattern) {
  fileList = (findFiles(glob: "**/${filePattern}").collect { "${WORKSPACE}" + '/' + it.path }).join(',')
  return fileList
}
